"""add_atencion_fields_to_citas

Revision ID: 6ae95c36c6ab
Revises: be819b6dbaa5
Create Date: 2025-10-28 13:37:32.234012

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '6ae95c36c6ab'
down_revision: Union[str, None] = 'be819b6dbaa5'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Drop atencion table if exists
    try:
        op.drop_index('ix_atencion_id', table_name='atencion')
    except:
        pass
    try:
        op.drop_table('atencion')
    except:
        pass

    # Add new columns to citas table - simple ALTER TABLE for SQLite
    connection = op.get_bind()

    # Check if columns already exist before adding
    inspector = sa.inspect(connection)
    existing_columns = [col['name'] for col in inspector.get_columns('citas')]

    if 'motivo_psicologico' not in existing_columns:
        op.add_column('citas', sa.Column('motivo_psicologico', sa.Boolean(), nullable=True))
    if 'motivo_academico' not in existing_columns:
        op.add_column('citas', sa.Column('motivo_academico', sa.Boolean(), nullable=True))
    if 'salud_en_general_vulnerable' not in existing_columns:
        op.add_column('citas', sa.Column('salud_en_general_vulnerable', sa.Boolean(), nullable=True))
    if 'requiere_seguimiento' not in existing_columns:
        op.add_column('citas', sa.Column('requiere_seguimiento', sa.Boolean(), nullable=True))
    if 'requiere_canalizacion_externa' not in existing_columns:
        op.add_column('citas', sa.Column('requiere_canalizacion_externa', sa.Boolean(), nullable=True))
    if 'estatus_canalizacion_externa' not in existing_columns:
        op.add_column('citas', sa.Column('estatus_canalizacion_externa', sa.String(length=200), nullable=True))
    if 'fecha_proxima_sesion' not in existing_columns:
        op.add_column('citas', sa.Column('fecha_proxima_sesion', sa.DateTime(timezone=True), nullable=True))
    if 'ultima_fecha_contacto' not in existing_columns:
        op.add_column('citas', sa.Column('ultima_fecha_contacto', sa.DateTime(timezone=True), nullable=True))
    if 'id_grupo' not in existing_columns:
        op.add_column('citas', sa.Column('id_grupo', sa.Integer(), nullable=True))
    if 'id_cuestionario' not in existing_columns:
        op.add_column('citas', sa.Column('id_cuestionario', sa.Integer(), nullable=True))

    # Note: SQLite doesn't support adding foreign keys to existing tables
    # Foreign keys will be enforced by SQLAlchemy ORM relationships

    # Clean up personas table - remove deprecated columns if they exist
    personas_columns = [col['name'] for col in inspector.get_columns('personas')]

    if 'tipo_persona' in personas_columns:
        with op.batch_alter_table('personas', schema=None) as batch_op:
            batch_op.drop_column('tipo_persona')

    if 'cohorte_id' in personas_columns:
        with op.batch_alter_table('personas', schema=None) as batch_op:
            batch_op.drop_column('cohorte_id')


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('personas', sa.Column('cohorte_id', sa.INTEGER(), nullable=True))
    op.add_column('personas', sa.Column('tipo_persona', sa.VARCHAR(), nullable=False))
    op.create_foreign_key(None, 'personas', 'cohorte', ['cohorte_id'], ['id'])
    op.drop_constraint(None, 'cuestionario', type_='foreignkey')
    op.drop_constraint(None, 'citas', type_='foreignkey')
    op.drop_constraint(None, 'citas', type_='foreignkey')
    op.drop_column('citas', 'id_cuestionario')
    op.drop_column('citas', 'id_grupo')
    op.drop_column('citas', 'ultima_fecha_contacto')
    op.drop_column('citas', 'fecha_proxima_sesion')
    op.drop_column('citas', 'estatus_canalizacion_externa')
    op.drop_column('citas', 'requiere_canalizacion_externa')
    op.drop_column('citas', 'requiere_seguimiento')
    op.drop_column('citas', 'salud_en_general_vulnerable')
    op.drop_column('citas', 'motivo_academico')
    op.drop_column('citas', 'motivo_psicologico')
    op.create_table('atencion',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('fecha_atencion', sa.DATETIME(), nullable=True),
    sa.Column('motivo_psicologico', sa.BOOLEAN(), nullable=True),
    sa.Column('motivo_academico', sa.BOOLEAN(), nullable=True),
    sa.Column('salud_en_general_vulnerable', sa.BOOLEAN(), nullable=True),
    sa.Column('requiere_seguimiento', sa.BOOLEAN(), nullable=True),
    sa.Column('requiere_canalizacion_externa', sa.BOOLEAN(), nullable=True),
    sa.Column('estatus_canalizacion_externa', sa.VARCHAR(), nullable=True),
    sa.Column('observaciones', sa.TEXT(), nullable=True),
    sa.Column('fecha_proxima_sesion', sa.DATETIME(), nullable=True),
    sa.Column('atendido', sa.BOOLEAN(), nullable=True),
    sa.Column('ultima_fecha_contacto', sa.DATETIME(), nullable=True),
    sa.Column('id_personal', sa.INTEGER(), nullable=True),
    sa.Column('id_persona', sa.INTEGER(), nullable=True),
    sa.Column('id_grupo', sa.INTEGER(), nullable=True),
    sa.Column('id_cuestionario', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['id_cuestionario'], ['cuestionario.id_cuestionario'], ),
    sa.ForeignKeyConstraint(['id_grupo'], ['grupo.id'], ),
    sa.ForeignKeyConstraint(['id_persona'], ['personas.id'], ),
    sa.ForeignKeyConstraint(['id_personal'], ['personal.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_atencion_id', 'atencion', ['id'], unique=False)
    # ### end Alembic commands ###
