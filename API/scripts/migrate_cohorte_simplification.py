#!/usr/bin/env python3
"""
Script de migraci√≥n para simplificar el sistema de cohortes.
Elimina la tabla cohorte y migra a campos directos en persona.
"""

import sys
import os

# Agregar el directorio padre al path para importar m√≥dulos de la app
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy import text
from sqlalchemy.orm import Session
from app.db.database import SessionLocal, engine

def backup_existing_data(db: Session):
    """Hacer backup de datos existentes de cohortes."""
    print("=== BACKUP DE DATOS EXISTENTES ===")
    
    try:
        # Verificar si existe la tabla cohorte
        result = db.execute(text("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name='cohorte';
        """))
        
        if result.fetchone():
            print("‚úÖ Tabla 'cohorte' encontrada")
            
            # Obtener datos de cohortes existentes
            cohortes_result = db.execute(text("SELECT * FROM cohorte"))
            cohortes = cohortes_result.fetchall()
            
            print(f"üìä Cohortes existentes: {len(cohortes)}")
            for cohorte in cohortes:
                print(f"  - ID: {cohorte[0]}, Nombre: {cohorte[1]}")
            
            # Obtener personas con cohorte_id
            personas_result = db.execute(text("""
                SELECT id, correo_institucional, cohorte_id
                FROM personas
                WHERE cohorte_id IS NOT NULL
            """))
            personas = personas_result.fetchall()
            
            print(f"üë• Personas con cohorte asignada: {len(personas)}")
            
            return cohortes, personas
        else:
            print("‚ÑπÔ∏è Tabla 'cohorte' no encontrada")
            return [], []
            
    except Exception as e:
        print(f"‚ö†Ô∏è Error durante backup: {e}")
        return [], []

def add_new_columns(db: Session):
    """Agregar nuevas columnas a la tabla persona."""
    print("\n=== AGREGANDO NUEVAS COLUMNAS ===")
    
    try:
        # Verificar si las columnas ya existen
        result = db.execute(text("PRAGMA table_info(personas)"))
        columns = [row[1] for row in result.fetchall()]

        if 'cohorte_ano' not in columns:
            print("‚ûï Agregando columna 'cohorte_ano'...")
            db.execute(text("ALTER TABLE personas ADD COLUMN cohorte_ano INTEGER"))
            print("‚úÖ Columna 'cohorte_ano' agregada")
        else:
            print("‚ÑπÔ∏è Columna 'cohorte_ano' ya existe")

        if 'cohorte_periodo' not in columns:
            print("‚ûï Agregando columna 'cohorte_periodo'...")
            db.execute(text("ALTER TABLE personas ADD COLUMN cohorte_periodo INTEGER DEFAULT 1"))
            print("‚úÖ Columna 'cohorte_periodo' agregada")
        else:
            print("‚ÑπÔ∏è Columna 'cohorte_periodo' ya existe")
        
        db.commit()
        
    except Exception as e:
        print(f"‚ùå Error agregando columnas: {e}")
        db.rollback()
        raise

def migrate_existing_data(db: Session, cohortes, personas):
    """Migrar datos existentes al nuevo formato."""
    print("\n=== MIGRANDO DATOS EXISTENTES ===")
    
    if not personas:
        print("‚ÑπÔ∏è No hay datos de cohorte para migrar")
        return
    
    try:
        # Crear mapeo de cohorte_id a informaci√≥n de cohorte
        cohorte_map = {}
        for cohorte in cohortes:
            cohorte_id, nombre = cohorte[0], cohorte[1]
            
            # Intentar extraer a√±o y per√≠odo del nombre
            # Formatos esperados: "2024-1", "Cohorte 2024-1", etc.
            ano, periodo = extract_year_period_from_name(nombre)
            cohorte_map[cohorte_id] = (ano, periodo)
            
            print(f"üìã Cohorte ID {cohorte_id} ('{nombre}') ‚Üí A√±o: {ano}, Per√≠odo: {periodo}")
        
        # Migrar datos de personas
        migrated_count = 0
        for persona in personas:
            persona_id, email, cohorte_id = persona[0], persona[1], persona[2]
            
            if cohorte_id in cohorte_map:
                ano, periodo = cohorte_map[cohorte_id]
                
                # Actualizar persona con nuevos campos
                db.execute(text("""
                    UPDATE personas
                    SET cohorte_ano = :ano, cohorte_periodo = :periodo
                    WHERE id = :persona_id
                """), {
                    'ano': ano,
                    'periodo': periodo,
                    'persona_id': persona_id
                })
                
                migrated_count += 1
                print(f"  ‚úÖ {email} ‚Üí A√±o: {ano}, Per√≠odo: {periodo}")
        
        db.commit()
        print(f"‚úÖ {migrated_count} personas migradas exitosamente")
        
    except Exception as e:
        print(f"‚ùå Error migrando datos: {e}")
        db.rollback()
        raise

def extract_year_period_from_name(nombre):
    """Extraer a√±o y per√≠odo del nombre de cohorte."""
    import re
    
    # Buscar patr√≥n a√±o-per√≠odo (ej: 2024-1, 2025-2)
    match = re.search(r'(\d{4})-(\d)', nombre)
    if match:
        return int(match.group(1)), int(match.group(2))
    
    # Buscar solo a√±o (asumir per√≠odo 1)
    match = re.search(r'(\d{4})', nombre)
    if match:
        return int(match.group(1)), 1
    
    # Valores por defecto si no se puede extraer
    print(f"‚ö†Ô∏è No se pudo extraer a√±o/per√≠odo de '{nombre}', usando valores por defecto")
    return 2024, 1

def remove_old_column(db: Session):
    """Eliminar columna cohorte_id antigua."""
    print("\n=== ELIMINANDO COLUMNA ANTIGUA ===")
    
    try:
        # En SQLite, no se puede eliminar columnas directamente
        # Necesitamos recrear la tabla sin la columna
        print("‚ö†Ô∏è SQLite no permite eliminar columnas directamente")
        print("‚ÑπÔ∏è La columna 'cohorte_id' se mantendr√° pero no se usar√°")
        print("‚ÑπÔ∏è En producci√≥n, considere recrear la tabla sin esta columna")
        
    except Exception as e:
        print(f"‚ùå Error eliminando columna: {e}")

def drop_cohorte_table(db: Session):
    """Eliminar tabla cohorte."""
    print("\n=== ELIMINANDO TABLA COHORTE ===")
    
    try:
        # Verificar si la tabla existe
        result = db.execute(text("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name='cohorte';
        """))
        
        if result.fetchone():
            print("üóëÔ∏è Eliminando tabla 'cohorte'...")
            db.execute(text("DROP TABLE cohorte"))
            db.commit()
            print("‚úÖ Tabla 'cohorte' eliminada exitosamente")
        else:
            print("‚ÑπÔ∏è Tabla 'cohorte' no existe")
            
    except Exception as e:
        print(f"‚ùå Error eliminando tabla: {e}")
        db.rollback()
        raise

def verify_migration(db: Session):
    """Verificar que la migraci√≥n fue exitosa."""
    print("\n=== VERIFICANDO MIGRACI√ìN ===")
    
    try:
        # Verificar nuevas columnas
        result = db.execute(text("""
            SELECT COUNT(*) as total,
                   COUNT(cohorte_ano) as con_ano,
                   COUNT(cohorte_periodo) as con_periodo
            FROM personas
        """))
        
        stats = result.fetchone()
        print(f"üìä Total personas: {stats[0]}")
        print(f"üìä Con a√±o de cohorte: {stats[1]}")
        print(f"üìä Con per√≠odo de cohorte: {stats[2]}")
        
        # Mostrar algunos ejemplos
        result = db.execute(text("""
            SELECT correo_institucional, cohorte_ano, cohorte_periodo
            FROM personas
            WHERE cohorte_ano IS NOT NULL
            LIMIT 5
        """))
        
        ejemplos = result.fetchall()
        if ejemplos:
            print("\nüìã Ejemplos de datos migrados:")
            for ejemplo in ejemplos:
                print(f"  - {ejemplo[0]}: A√±o {ejemplo[1]}, Per√≠odo {ejemplo[2]}")
        
        print("‚úÖ Verificaci√≥n completada")
        
    except Exception as e:
        print(f"‚ùå Error en verificaci√≥n: {e}")

def main():
    """Funci√≥n principal de migraci√≥n."""
    print("=== MIGRACI√ìN DE SIMPLIFICACI√ìN DE COHORTES ===")
    print("Este script migra del sistema de tabla cohorte a campos directos")
    print()
    
    # Crear sesi√≥n de base de datos
    db = SessionLocal()
    
    try:
        # Paso 1: Backup de datos existentes
        cohortes, personas = backup_existing_data(db)
        
        # Paso 2: Agregar nuevas columnas
        add_new_columns(db)
        
        # Paso 3: Migrar datos existentes
        migrate_existing_data(db, cohortes, personas)
        
        # Paso 4: Eliminar columna antigua (opcional en SQLite)
        remove_old_column(db)
        
        # Paso 5: Eliminar tabla cohorte
        drop_cohorte_table(db)
        
        # Paso 6: Verificar migraci√≥n
        verify_migration(db)
        
        print("\n=== MIGRACI√ìN COMPLETADA EXITOSAMENTE ===")
        print("‚úÖ Sistema de cohortes simplificado")
        print("‚úÖ Datos migrados correctamente")
        print("‚úÖ Tabla cohorte eliminada")
        
        return 0
        
    except Exception as e:
        print(f"\n‚ùå ERROR DURANTE LA MIGRACI√ìN: {e}")
        db.rollback()
        return 1
    finally:
        db.close()

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
